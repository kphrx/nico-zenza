name: Deploy

on:
  workflow_run:
    workflows: [Build, Release]
    types: [completed]

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  pack:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: oras-project/setup-oras@v1
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm
      - run: npm ci
      - name: artifacts data
        id: scripts
        run: |
          echo "value=$(npm query '.workspace:attr([keywords=script])' | jq -c 'map({name,version,description,location,"script-name":.name|split("/";"")[1]})')" >> "$GITHUB_OUTPUT"
      - name: opened pull requests
        uses: actions/github-script@v7
        id: pull-requests
        with:
          result-encoding: json
          script: |
            const pulls = await github.paginate(github.rest.pulls.list, {
              ...context.repo,
              state: 'open',
            });
            return pulls.map(pull => pull.number);
      - name: versions
        uses: actions/github-script@v7
        id: versions
        env:
          SCRIPT_PACKAGES: ${{ steps.scripts.outputs.value }}
        with:
          result-encoding: json
          script: |
            const tags = await github.paginate(github.rest.repos.listTags, {
              ...context.repo,
            });
            const versions = JSON.parse(process.env.SCRIPT_PACKAGES).reduce((acc, cur) => ({...acc, [cur["script-name"]]: []}), null);
            return tags.reduce((acc, tag) => {
              const [name, version] = tag.name.split('/');
              if (name in acc) {
                acc[name].push(version);
              }
              return acc;
            }, versions);
      - name: download artifacts
        working-directory: ${{ runner.temp }}
        env:
          SCRIPT_PACKAGES: ${{ steps.scripts.outputs.value }}
          PR_NUMBERS: ${{ steps.pull-requests.outputs.result }}
          VERSIONS: ${{ steps.versions.outputs.result }}
        run: |
          mkdir -p dist
          echo "$SCRIPT_PACKAGES" | jq -r 'map(."script-name")[]' | while read -r name; do
            echo "::group::assets for ${name}"
            oras pull -o dist/scripts/latest/ "ghcr.io/${{ github.repository }}/${name}:latest" || true
            oras pull -o dist/scripts/edge/ "ghcr.io/${{ github.repository }}/${name}:edge" || true

            echo "$PR_NUMBERS" | jq -r '.[]' | while read -r number; do
              oras pull -o "dist/scripts/GH-${number}/" "ghcr.io/${{ github.repository }}/${name}:pr-${number}" || true
            done

            echo "$VERSIONS" | jq -r ".\"${name}\"[]" | while read -r version; do
              oras pull -o "tmp-release/" "ghcr.io/${{ github.repository }}/${name}:${version}" || continue
              rm -f tmp-release/*.meta.js
              mkdir -p dist/scripts/releases/
              mv tmp-release/*.user.js "dist/scripts/releases/${name}_v${version}.user.js"
            done
            echo "::endgroup::"
          done
          echo "::group::channels"
          ls dist/scripts
          echo "::endgroup::"
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ runner.temp }}/dist/

  deploy:
    needs: pack
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/deploy-pages@v4
        id: deployment
