name: Deploy Pages

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  metadata:
    runs-on: ubuntu-latest

    outputs:
      scripts: ${{ steps.values.outputs.scripts }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm
      - run: npm ci
      - run: npm run build:lib
      - name: artifacts data
        id: values
        run: |
          printf "libraries<<EOF\n%s\nEOF\n" "$(npm query '.workspace:attr([keywords=build]),.workspace:attr([keywords=lib])' | jq -r 'map(.location+"/dist/")[]')" >> $GITHUB_OUTPUT
          echo "scripts=$(npm query '.workspace:attr([keywords=script])' | jq -c 'map({name,version,description,location,"script-name":.name|split("/";"")[1]})')" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        with:
          name: libraries
          path: ${{ steps.values.outputs.libraries }}

  build:
    needs: metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.metadata.outputs.scripts) }}

    name: build (${{ matrix.name }})

    steps:
      - uses: actions/checkout@v4
      - uses: oras-project/setup-oras@v1
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.script-name }}
          tags: |
            type=ref,event=pr
            type=edge
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.description }}
            version=${{ matrix.version }}
      - id: pages
        uses: actions/configure-pages@v5
      - run: npm ci
      - uses: actions/download-artifact@v4
        with:
          name: libraries
          path: packages/
      - name: npm run build:script
        run: npm run -w ${{ matrix.name }} build:script
        env:
          DOWNLOAD_BASE_URL: ${{ steps.pages.outputs.base_url }}/scripts/${{ steps.meta.outputs.version }}/
      - name: oras push ${{ steps.meta.outputs.tags }}
        working-directory: ./${{ matrix.location }}/dist/
        run: |
          jq '{"$manifest": .labels}' <<EOF | tee annotations.json
          ${{ steps.meta.outputs.json }}
          EOF
          oras push --annotation-file annotations.json ${{ steps.meta.outputs.tags }} \
            ${{ matrix.script-name }}+dev.user.js:application/vnd.unknown.layer.v1+javascript \
            ${{ matrix.script-name }}+dev.meta.js:application/vnd.unknown.layer.v1+javascript

  pack:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm
      - run: npm ci
      - name: Build
        env:
          DOWNLOAD_BASE_URL: ${{ steps.pages.outputs.base_url }}/scripts
        run: npm run build:dev
      - uses: actions/upload-artifact@v4
        with:
          name: scripts
          path: dist/

  pages:
    needs: pack
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: scripts
          path: ${{ runner.temp }}/scripts/
      - name: Move scripts directory
        working-directory: ${{ runner.temp }}
        run: |
          mkdir ./dist
          mv ./scripts/ ./dist
          chmod -c -R +rX ./dist/ | while read -r line; do
              echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ runner.temp }}/dist/

  deploy:
    needs: pages
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    concurrency:
      group: pages
      cancel-in-progress: true
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/deploy-pages@v4
        id: deployment
