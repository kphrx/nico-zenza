name: Build

on:
  push:
    branches:
      - master
    tags:
      - "([a-z0-9]|.|-)+/v(0|[1-9][0-9]*).(0|[1-9][0-9]*).(0|[1-9][0-9]*)(-([a-z0-9]|.|-)+)?"
  pull_request:
    branches:
      - master

jobs:
  metadata:
    runs-on: ubuntu-latest

    outputs:
      scripts: ${{ steps.scripts.outputs.result }}
      base-url: ${{ format('{0}/scripts/{1}', steps.pages.outputs.base_url, steps.build-kind.outputs.result) }}
      build-args: ${{ format('--buildVariant {0} {1}', steps.build-kind.outputs.result, steps.build-kind.outputs.result == 'edge' && format('--versionMetadata "sha-{0}"', github.sha) || startsWith(steps.build-kind.outputs.result, 'GH-') && format('--versionMetadata "{0}--sha-{1}"', steps.build-kind.outputs.result, github.event.pull_request.head.sha) || '--production') }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm
      - id: pages
        uses: actions/configure-pages@v5
      - run: npm ci
      - run: npm run build:lib
      - name: require libraries
        id: libraries
        run: |
          printf "value<<EOF\n%s\nEOF\n" "$(npm query '.workspace:attr([keywords=build]),.workspace:attr([keywords=lib])' | jq -r 'map(.location+"/dist/")[]')" >> "$GITHUB_OUTPUT"
      - name: script path
        uses: actions/github-script@v7
        id: build-kind
        with:
          result-encoding: string
          script: |
            if (context.eventName === 'pull_request') {
              return `GH-${context.issue.number}`;
            }
            if (context.ref.startsWith('refs/tags/')) {
              return 'latest';
            }
            return 'edge';
      - name: scripts
        uses: actions/github-script@v7
        id: scripts
        with:
          result-encoding: json
          script: |
            const {
              exitCode,
              stdout,
              stderr
            } = await exec.getExecOutput('npm', ['query', '.workspace:attr([keywords=script])']);
            if (exitCode > 0) {
              throw stderr;
            }
            let scripts = JSON.parse(stdout).map(({name, description, location}) => ({
              name,
              version: '',
              description,
              location,
              "script-name": name.split("/")[1]
            }));
            if (context.eventName === 'push' && context.ref.startsWith('refs/tags/')) {
              const [scriptName, version] = context.ref.substring(10).split('/');
              scripts = scripts.filter(script => script['script-name'] === scriptName);
              scripts[0].version = version;
            }
            return scripts;
      - uses: actions/upload-artifact@v4
        with:
          name: libraries
          path: ${{ steps.libraries.outputs.value }}

  build:
    needs: metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.metadata.outputs.scripts) }}

    name: build (${{ matrix.name }})

    steps:
      - uses: actions/checkout@v4
      - uses: oras-project/setup-oras@v1
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm
      - run: npm ci
      - uses: actions/download-artifact@v4
        with:
          name: libraries
          path: packages/
      - name: npm run build:script
        run: npm run -w ${{ matrix.name }} build:script -- ${{ needs.metadata.outputs.build-args }}
        env:
          DOWNLOAD_BASE_URL: ${{ needs.metadata.outputs.base-url }}
      - name: script version
        id: version
        run: echo "value=$(grep '// @version' ./${{ matrix.location }}/dist/${{ matrix.script-name }}.meta.js | awk '{print $3}')" >> "$GITHUB_OUTPUT"
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.script-name }}
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ matrix.version }}
            type=edge
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.description }}
            version=${{ steps.version.outputs.value }}
      - name: oras push ${{ steps.meta.outputs.tags }}
        working-directory: ./${{ matrix.location }}/dist/
        run: |
          jq '{"$manifest": .labels}' <<EOF | tee annotations.json
          ${{ steps.meta.outputs.json }}
          EOF
          oras push --annotation-file annotations.json ${{ steps.meta.outputs.tags }} \
            ${{ matrix.script-name }}.user.js:application/vnd.unknown.layer.v1+javascript \
            ${{ matrix.script-name }}.meta.js:application/vnd.unknown.layer.v1+javascript

  build-conclusion:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Result
        run: ${{ needs.build.result == 'success' }}
